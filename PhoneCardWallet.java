/* PLEASE DO NOT MODIFY A SINGLE STATEMENT IN THE TEXT BELOW.
READ THE FOLLOWING CAREFULLY AND FILL IN THE GAPS

I hereby declare that all the work that was required to 
solve the following problem including designing the algorithms
and writing the code below, is solely my own and that I received
no help in creating this solution and I have not discussed my solution 
with anybody. I affirm that I have read and understood
the Senate Policy on Academic honesty at 
https://secretariat-policies.info.yorku.ca/policies/academic-honesty-senate-policy-on/
and I am well aware of the seriousness of the matter and the penalties that I will face as a 
result of committing plagiarism in this assignment.

BY FILLING THE GAPS,YOU ARE SIGNING THE ABOVE STATEMENTS.

Full Name: Arpit Nileshbhai Thakkar
Student Number: 217632340
Course Section: Z
*/

package eecs2030.pe2;

import java.util.HashSet;
import java.util.Set;

/**
 * A class that represents a wallet of phone cards. Such a wallet has a name and a composed set of phone cards.
 * @author EECS2030
 *
 */
public class PhoneCardWallet {
 
	private String name;
	private HashSet<PhoneCard> cardSet;
	
	/**
	 * Create a PhoneCardWallet with the given name and an empty set of phone cards.
	 * @param name - The wallet's name.
	 * @pre name is not null.
	 */
	
	public PhoneCardWallet(String name) {
		this.name = name;
		this.cardSet = new HashSet<PhoneCard>();
	}
	
	/**
	 * Create a PhoneCardWallet with the given name and set of phone cards. A shallow copy of the set of cards is stored in the wallet.
	 * @param name - The wallet's name
	 * @param cardSet - The set of phone cards to be included in the wallet.
	 * @pre name and cardSet are not null
	 */
	
	public PhoneCardWallet(String name, Set<PhoneCard> cardSet) {
		this.name = name;
		this.cardSet = new HashSet<PhoneCard>();
		for(PhoneCard p : cardSet) {
			this.cardSet.add(p);
		}
	}
	
	/**
	 * Add the given phone card to this wallet.
	 * @param card - the phone card to be added.
	 * @pre card is not null.
	 */
	
	public void addCard(PhoneCard card) {
		this.cardSet.add(card);
	}
	
	/**
	 * Remove the given phone card from this wallet.
	 * @param card - he phone card to be removed.
	 * @pre card is not null.
	 */
	
	public void removeCard(PhoneCard card) {
		this.cardSet.remove(card);
	}
	
	/**
	 * Get the name of this wallet.
	 * @return the name of this wallet.
	 */
	
	public String getName() {
		return this.name;
	}
	
	/**
	 * Get the set of cards contained in this wallet. A shallow copy of the set of cards in the wallet is returned.
	 * @return the set of cards contained in this wallet.
	 */
	
	public Set<PhoneCard> getCardSet() {
		Set<PhoneCard> cSet = new HashSet<PhoneCard>();
		for(PhoneCard phnCard : cardSet) {
			cSet.add(phnCard);
		}
		return cSet;
	}
	
	/**
	 * Obtain the set of cards contained in this wallet that could be used to make a call to the given zone with the given cost. 
	 * The method returns the set of all cards in the wallet that allow a call to the given zone and have a balance greater or equal to cost.
	 * @param zone - the zone of the call.
	 * @param cost - the cost of the call.
	 * @pre zone is not null
	 * @return the set of cards contained in this wallet that could be used to make such a call.
	 */
	
	public Set<PhoneCard> filter(CallZone zone, double cost){
		Set<PhoneCard> fSet = new HashSet<PhoneCard>();
		for(PhoneCard fCard : cardSet) {
			if(fCard.isAllowed(zone) && fCard.getBalance()>=cost) {
				fSet.add(fCard);
			}
		}
		return fSet;
	}
	
	/**
	 * Create a string representation of the wallet. The string is "PhoneCardWallet named " followed by the wallet's name 
	 * followed by " with cards " followed by the wallet's card set's string representation.
	 * @return the string representation of the wallet.
	 */
	
	public String toString() {
		return "PhoneCardWallet named " + this.name + "with cards " + this.cardSet.toString() ;
	}
	
	/**
	 * Creates a hash code for the object. The hash code is generated by considering the wallet's name and card set.
	 * @return the object's hash code.
	 */
	
	public int hashCode() {
		return this.toString().hashCode();
	}
	
	/**
	 * Compares the wallet with another object for equality. 
	 * Two PhoneCardWallet instances are equal if and only if their names are equal and their sets of cards are equal.
	 * @param obj - the object to compare with for equality.
	 * @return true if the wallet and object are equal; false otherwise.
	 */

	public boolean equals(Object obj) {
		if(obj == null)
			return false;
		if(this.getClass()!=obj.getClass())
			return false;
		PhoneCardWallet pc = (PhoneCardWallet) obj;
		if(this.name.compareTo(pc.name)==0 && this.cardSet.size()==pc.cardSet.size()) {
			if(this.cardSet.equals(pc.cardSet))
					return true;
	}
		return false;
	}
}